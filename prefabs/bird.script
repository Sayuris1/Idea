function init(self)
    msg.post("#fast", "disable")

	self.speed_fast = 150 * 0.3
    self.speed_slow = 150
    self.current_speed = self.speed_slow
end

function update(self, dt)
    if not self.is_attacking then
        msg.post("#fast", "disable")

        local destination = go.get_position("/player_2")
        destination = destination + vmath.vector3(30, 70, 0)

        local position = go.get_position()

        if vmath.length(destination - position) > 20 then
            self.is_near = false

            local dir = vmath.normalize(destination - position)

            if dir.x < 0 then
                sprite.set_hflip("#sprite", true)
            else
                sprite.set_hflip("#sprite", false)
            end
            go.set_position(position + dir * self.current_speed * dt)
        else
            self.is_near = true
        end

    -- Attack
    else
        msg.post("#fast", "enable")
        local position = go.get_position()

        if self.dir.x < 0 then
                sprite.set_hflip("#sprite", true)
            else
                sprite.set_hflip("#sprite", false)
            end
        go.set_position(position + self.dir * self.current_speed * dt)
    end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("attack") and self.is_near then
        special_cooldown = 2
        self.is_attacking = true
        self.current_speed = self.speed_fast

        local destination
        if zawardo then
            destination = go.get_position(ghost["/main"])
        else
            destination = go.get_position("/player_1")
        end

        local position = go.get_position()
        self.dir = vmath.normalize(destination - position) * 10
        
        self.timer = timer.delay(1.5, false, function ()
            self.is_attacking = false
            self.current_speed = self.speed_slow
        end)

    elseif message_id == hash("trigger_response") and message.enter then
        timer.cancel(self.timer)

        self.is_attacking = false
        self.current_speed = self.speed_slow
    end
end