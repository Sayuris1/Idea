local camera = require "orthographic.camera"

camera.ORTHOGRAPHIC_RENDER_SCRIPT_USED = true

local CLEAR_COLOR = hash("clear_color")

local IDENTITY = vmath.matrix4()

function init(self)
	self.tile_pred = render.predicate({"tile"})
	self.gui_pred = render.predicate({"gui"})
	self.text_pred = render.predicate({"text"})
	self.particle_pred = render.predicate({"particle"})
	self.tile_2_pred = render.predicate({"tile_2"})

	self.zawardo_buffer_pred = render.predicate({"zawardo_buffer"})
	self.zawardo_screen_pred = render.predicate({"zawardo_screen"})
	self.scene_change_pred = render.predicate({"scene_change"})

    local color_params = { format = render.FORMAT_RGBA,
                           width = render.get_window_width(),
                           height = render.get_window_height(),
                           min_filter = render.FILTER_LINEAR,
                           mag_filter = render.FILTER_LINEAR,
                           u_wrap = render.WRAP_CLAMP_TO_EDGE,
                           v_wrap = render.WRAP_CLAMP_TO_EDGE }

    self.zawardo_buffer_target = render.render_target({[render.BUFFER_COLOR_BIT] = color_params})
    self.zawardo_screen_target = render.render_target({[render.BUFFER_COLOR_BIT] = color_params})
    self.scene_change_target = render.render_target({[render.BUFFER_COLOR_BIT] = color_params})

	self.clear_color = vmath.vector4(0, 0, 0, 0)
	self.clear_color.x = sys.get_config("render.clear_color_red", 0)
	self.clear_color.y = sys.get_config("render.clear_color_green", 0)
	self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
	self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)
end

function update(self)
    if zawardo then
        -- clear color
        render.set_depth_mask(true)
        render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
        render.set_depth_mask(false)
        
        -- set default blend state
        render.enable_state(render.STATE_BLEND)
        render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)

        -- draw world per camera
        local cameras = camera.get_cameras()

        render.disable_state(render.STATE_DEPTH_TEST)
        render.disable_state(render.STATE_CULL_FACE)
        render.disable_state(render.STATE_STENCIL_TEST)

        local viewport = camera.get_viewport(cameras[1])
        render.set_viewport(viewport.x, viewport.y, viewport.z, viewport.w)
        render.set_view(camera.get_view(cameras[1]))
        render.set_projection(camera.get_projection(cameras[1]))

        render.set_render_target_size(self.zawardo_buffer_target, viewport.z, viewport.w)
        render.set_render_target(self.zawardo_buffer_target)
        render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

        render.draw(self.tile_pred)
        render.draw(self.particle_pred)
        render.draw_debug3d()

        render.set_render_target_size(self.zawardo_screen_target, viewport.z, viewport.w)
        render.set_render_target(self.zawardo_screen_target)
        render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

        render.draw(self.tile_2_pred)

        render.enable_texture(0, self.zawardo_buffer_target, render.BUFFER_COLOR_BIT)
        render.draw(self.zawardo_buffer_pred)
        render.disable_texture(0)

        render.set_render_target(render.RENDER_TARGET_DEFAULT)

        render.enable_texture(0, self.zawardo_screen_target, render.BUFFER_COLOR_BIT)
        render.draw(self.zawardo_screen_pred)
        render.disable_texture(0)


        -- draw gui in screen space using an orthographic projection
        render.disable_state(render.STATE_DEPTH_TEST)
        render.disable_state(render.STATE_CULL_FACE)
        render.enable_state(render.STATE_STENCIL_TEST)
        render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
        render.set_view(IDENTITY)
        render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))

        render.draw(self.gui_pred)
        render.draw(self.text_pred)

        render.disable_state(render.STATE_STENCIL_TEST)
    elseif in_marra then
        -- clear color
        render.set_depth_mask(true)
        render.set_depth_mask(false)
        
        -- set default blend state
        render.enable_state(render.STATE_BLEND)
        render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)

        -- draw world per camera
        local cameras = camera.get_cameras()

        render.disable_state(render.STATE_DEPTH_TEST)
        render.disable_state(render.STATE_CULL_FACE)
        render.disable_state(render.STATE_STENCIL_TEST)

        local viewport = camera.get_viewport(cameras[1])
        render.set_viewport(viewport.x, viewport.y, viewport.z, viewport.w)
        render.set_view(camera.get_view(cameras[1]))
        render.set_projection(camera.get_projection(cameras[1]))

        render.set_render_target_size(self.scene_change_target, viewport.z, viewport.w)
        render.set_render_target(self.scene_change_target)

        render.draw(self.tile_pred)
        render.draw(self.tile_2_pred)
        render.draw(self.particle_pred)
        render.draw_debug3d()

        render.set_render_target(render.RENDER_TARGET_DEFAULT)

        render.enable_texture(0, self.scene_change_target, render.BUFFER_COLOR_BIT)
        render.draw(self.scene_change_pred)
        render.disable_texture(0)

        -- draw gui in screen space using an orthographic projection
        render.disable_state(render.STATE_DEPTH_TEST)
        render.disable_state(render.STATE_CULL_FACE)
        render.enable_state(render.STATE_STENCIL_TEST)
        render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
        render.set_view(IDENTITY)
        render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))

        render.draw(self.gui_pred)
        render.draw(self.text_pred)

        render.disable_state(render.STATE_STENCIL_TEST)
    else
       -- clear color
        render.set_depth_mask(true)
        render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
        render.set_depth_mask(false)
        
        -- set default blend state
        render.enable_state(render.STATE_BLEND)
        render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)

        -- draw world per camera
        local cameras = camera.get_cameras()

        render.disable_state(render.STATE_DEPTH_TEST)
        render.disable_state(render.STATE_CULL_FACE)
        render.disable_state(render.STATE_STENCIL_TEST)

        local viewport = camera.get_viewport(cameras[1])
        render.set_viewport(viewport.x, viewport.y, viewport.z, viewport.w)
        render.set_view(camera.get_view(cameras[1]))
        render.set_projection(camera.get_projection(cameras[1]))

        render.draw(self.tile_pred)
        render.draw(self.tile_2_pred)
        render.draw(self.particle_pred)
        render.draw_debug3d()

        -- draw gui in screen space using an orthographic projection
        render.disable_state(render.STATE_DEPTH_TEST)
        render.disable_state(render.STATE_CULL_FACE)
        render.enable_state(render.STATE_STENCIL_TEST)
        render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
        render.set_view(IDENTITY)
        render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))

        render.draw(self.gui_pred)
        render.draw(self.text_pred)

        render.disable_state(render.STATE_STENCIL_TEST)
    end
end

function on_message(self, message_id, message)
	if message_id == CLEAR_COLOR then
		self.clear_color = message.color
	end
end
